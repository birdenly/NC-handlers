[Constants]
global $in_game

; ---------------------------------------------------
; Only move the subtitles if we are "ingame" which is
; determined below. TODO - better way to do this?
; ---------------------------------------------------

[ShaderOverrideHUDPRESENCE]
hash=9958a636cbef5557
preset=INGAME

[PresetINGAME]
$in_game=1

[ShaderOverrideFORHUDTEXT]
hash=da86a094e768f000
if $in_game
	checktextureoverride=ib
endif

[TextureOverrideAPPLYINGAME]
hash=3e4f8614
if $in_game
	pre z=1
	post z=0
endif
;handling=skip

; ---------------------------------------------------
; Remove the green filter over the menus.
; TODO - How do you move or stretch this thing?
; ---------------------------------------------------

[ShaderOverrideGREENFILTER]
hash=a642005ad1511108
handling=skip

; ---------------------------------------------------
; Shift all HUD elements to the center of the screen.
; ---------------------------------------------------

[ShaderRegexSHIFTHUD]
shader_model = ps_5_0



; I will explain this regex.

; mul r\d+\.[wxyz]{1}, cb1\[127\]\.y, l\(1\.77777779\)
;    We always start by looking for the multiplcation of cb1[127].y by 1.77777779 (16/9). 
;    Educated guess: that register holds the screen height, and the multiplacation results in the "screen width" (they assume the ONLY monitor used is 16:9).
;    We don't need that multiplacation per se, but it is a consistent starting point, so we need a positive lookbehind reference to it.

; (mul ... [\S\s]+\K)
;    The command we DO want to modify is shortly after, but we don't know how many commands are in between, 
;    so we use [\S\s]+ in conjunction with \K. This sufficiently emulates a dynamic-length, positive lookbehind regex.

; movc (?P<register>r\d+\.[wxyz]{1}), ...
;    This movc command is what we're looking for. We want to remember the register that the result is stored in, 
;    so we use (?P<register>...), which gives it the alias ${register}. We can mostly ignore the rest of the line.

[ShaderRegexSHIFTHUD.Pattern]
(mul r\d+\.[wxyz]{1}, cb1\[127\]\.y, l\(1\.77777779\)[\S\s]+\K)movc (?P<register>r\d+\.[wxyz]{1}), r\d+\.[wxyz]{1}, r\d+\.[wxyz]{1}, r\d+\.[wxyz]{1}



; ${0}\n
;    Directly after the movc command is where we want to do the shift. So we rewrite the movc line exactly as is - 
;    ${0} is the alias for the matched result.

; add ${register}, ${register}, l(-0.0000)
;    We add a constant to that register we captured from before, and store the result in the same register.
;    The constant l(-0.0000) below is calculated and replaced by magic.py.

[ShaderRegexSHIFTHUD.Pattern.Replace]
${0}\nadd ${register}, ${register}, l(-0.0000)